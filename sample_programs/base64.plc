def <error_out>
{
  clear();
  sprint("ERROR!");
  exit(-1);
}

def <encode>
{
  base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  encode = pop();
  if(encode > 63)
    call <error_out>;
  
  push(base64[encode]);
}

def <main>
{
  idx = 0;
  shift = 0;
  next = 0;
  mask = 0;
  do_encode = 1;

  sprint("Enter e or d");
  val = getch();
  if(val == 'e')
    {
      do_encode = 1;
    }
  else if(val == 'q')
    {
      exit(0);
    }
  else
    {
      clear();
      sprint("Huh?");
      exit(-1);
    }

  clear();
  val = getch();
  while(val != 0x4)
    {
      curr = val;
      
      shift = idx%3;

      if(shift == 0)
	{
	  next = val & 3;
	  next = next << 4;
	  curr = curr & 0x7c;
	  curr = curr >> 2;
	  push(curr);
	  call <encode>;
	  curr = pop();
	  putch(curr);
	}
      else if(shift == 1)
	{
	  curr = curr & 0xf0;
	  curr = curr >> 4;
	  curr = curr + next;
	  next = val & 0xf;
	  next = next << 2;
	  push(curr);
	  call <encode>;
	  curr = pop();
	  putch(curr);
	}
      else
	{
	  curr = curr & 0xc0;
	  curr = curr >> 6;
	  curr = curr + next;
	  push(curr);
	  call <encode>;
	  curr = pop();
	  putch(curr);
	  curr = val & 0x3f;
	  push(curr);
	  call <encode>;
	  curr = pop();
	  putch(curr);
	}
      
      idx = idx + 1;
      val = getch();
    }

  shift = idx % 3;
  if(shift > 0)
    {
      push(next);
      call <encode>;
      curr = pop();
      putch(curr);
      putch('=');
      if(shift == 1)
	putch('=');
    }
}
